%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Simulate estimation after blinded interim estimations}
\documentclass{article}

\title{Maximum attainable bias for a given first stage sample size}
\author{Florian Klinglmueller}
\usepackage{colortbl}
\usepackage{booktabs}
\newcommand{\ie}{{\em i.e.,~}}
\begin{document}

\maketitle

\section{Introduction}

We also looked at the maximum bias that may be attained (using the
adjusted sample size reassessment rule) for a given first stage sample
size. 

<<echo=F,results='hide',warning=F>>=
library(parallel)
library(blindConfidence)
library(ggplot2)
library(reshape2)
library(plyr)
options(mc.cores=detectCores()-3)
@

We simulate adaptive trials for true differences of means between 0
and 4, true standard deviations between .2 and 4 and (total) first
stage sample sizes between 4 and 142. 

<<>>=
G <- expand.grid(delta=round(seq(0,4,.1),2),
                 sigma=round(seq(.2,4,.2),2),
                 d = c(1),
                 s = round(seq(.5,3,.1),2))
G$n1 <- ceiling(1/2*zss(G$s,G$d,.025,.2))
apply(G,2,summary)
@



<<eval=FALSE,echo=FALSE>>=

set.seed(50014056)
runs <- 5*10^6
system.time(gridsim <- t(simplify2array(mclapply(1:nrow(G),
                                                 function(i) {c(G[i,],
                                                                simVBIA(delta=G[i,]$delta,
                                                                        sigma=G[i,]$sigma,
                                                                        d=G[i,]$d,
                                                                        s=G[i,]$s,
                                                                        cf=1,
                                                                        runs=runs,
                                                                        alpha=.025,
                                                                        beta=.2))}))))


gsim <- as.data.frame(t(apply(gridsim,1,unlist)))

## compute relative bias
gsim$var.rbias <- gsim$variance.bias/gsim$sigma^2

## compute the theoretical lower bound for the variance bias
gsim$bound <- lowerBound(gsim$n1,gsim$d)

runs <- 10^5
bsim <- mclapply(1:nrow(gsim),function(i) {c(gsim[i,],
                                             simMBIA(delta=gsim[i,]$delta,
                                                     sigma=gsim[i,]$sigma,
                                                     n1=gsim[i,]$n1,
                                                     runs=runs))})

bsim <- do.call('cbind',bsim)
bsim <- as.data.frame(apply(bsim,1,unlist),row.names=NA)

gridsim <- bsim
gridsim$brannath <- .4*sqrt(2)*gridsim$sigma/sqrt(gridsim$n1)

@


For each scenario we perform $10^6$ simulation runs.


<<eval=FALSE,echo=FALSE>>=
fname <- paste('maxsim_',format(Sys.time(),"%y%m%d"),'.Rd',sep='')
save(gridsim,file=fname)
@


\section{Results}


<<echo=F>>=
data(maxsim)

full.sim <- gridsim
gridsim$ylow <- 0
gridsim <- subset(full.sim,d==1 & sigma>=.5)

@

<<results='hide',include=F,echo=F>>=
#This little function takes care of annotating the plots.
lverbose = function(variable,value){
    if(variable == "variable"){
        c('Maximum mean bias',expression(delta),expression(sigma))
        ## sapply(value,function(val) substitute(paste(sigma[0]," = ",foo,", ",2n[1]," = ",n1,sep=''),
        ##                                       list(foo=val,n1=ceiling(1/2*zss(val,1,.025,.2)))))
    } else {
        c("Unadjusted","Adjusted")
    }
}

@

Figure \ref{fig:maxbias} shows the results.

<<maxbias,echo=F,fig.cap="Maximum attainable mean bias for a given first stage sample size: Left column shows data for absolute bias, right column for relative bias (in units of the standard error). First row gives maximum bias, second the difference of means, third the standard deviation and fourth the variance of the mean where the maximum is attained.">>=

gridsim <- within(gridsim,{relbias <- mean.bias/sqrt(vm)
                           uc.relbias <- uc.mean.bias/sqrt(uc.vm)})

max.bias <- ddply(gridsim,"n1",summarise,
                  max.mean.bias= -min(mean.bias),
                  max.mean.bias.delta = delta[which.min(mean.bias)],
                  max.mean.bias.sigma = sigma[which.min(mean.bias)],
                  ## max.mean.bias.vm = vm[which.min(mean.bias)],
                  max.rel.mean.bias= -min(relbias),
                  max.rel.mean.bias.delta = delta[which.min(relbias)],
                  max.rel.mean.bias.sigma = sigma[which.min(relbias)],
                  ## max.rel.mean.bias.vm = vm[which.min(relbias)],
                  uc.max.mean.bias= -min(uc.mean.bias),
                  uc.max.mean.bias.delta = delta[which.min(uc.mean.bias)],
                  uc.max.mean.bias.sigma = sigma[which.min(uc.mean.bias)],
                  ## uc.max.mean.bias.vm = vm[which.min(uc.mean.bias)],
                  uc.max.rel.mean.bias= -min(uc.relbias),
                  uc.max.rel.mean.bias.delta = delta[which.min(uc.relbias)],
                  uc.max.rel.mean.bias.sigma = sigma[which.min(uc.relbias)]
                  ## uc.max.rel.mean.bias.vm = vm[which.min(uc.relbias)]
                  ## max.variance.bias= -min(variance.bias),
                  ## max.variance.bias.delta = delta[which.min(variance.bias)],
                  ## max.variance.bias.sigma = sigma[which.min(variance.bias)],
                  ## max.variance.bias.vm = vm[which.min(variance.bias)],
                  )


df <- melt(max.bias,id='n1')
df <- within(df,scale <- c("absolute","relative")[grepl("rel",variable)+1])
df <- within(df,method <- factor((2:1)[grepl("uc",variable)+1],labels=c("unadjusted","adjusted")))
df <- within(df,variable <- sub("rel\\.","",variable))
df <- within(df,variable <- sub("uc\\.","",variable))
df <- within(df,variable <- factor(variable,labels=c('maximum mean bias',expression(delta),expression(sigma))))
dfa <- df[df$scale=="absolute",]
scalehelper <- data.frame(n1=rep(-10,3),variable=factor(1:3,label=c("maximum mean bias",expression(delta),expression(sigma))),value=rep(0,3),scale=rep("absolute",3),method=rep("adjusted",3))
dfa <- rbind(dfa,scalehelper)
mplot <- ggplot(dfa,aes(2*n1,value))+
    geom_line(subset=.(variable=="maximum mean bias")) +
    geom_smooth(subset=.(variable!="maximum mean bias")) + geom_point(subset=.(variable!="maximum mean bias"),size=1) +
    facet_grid(variable~method,scale='free_y',labeller=lverbose) +xlab(expression(paste("Total first stage sample size ",2*n[1])))+ylab('Value')+theme_bw()+xlim(c(2,150))
print(mplot)

## relativer bias (constallation die den bias,bzw,type I error, maximiert)
@ 

<<maxVarbias,echo=F>>=
max.varbias <- ddply(gridsim,"n1",summarise,
                  max.variance.bias= -min(variance.bias),
                  max.variance.bias.delta = delta[which.min(variance.bias)],
                  max.variance.bias.sigma = sigma[which.min(variance.bias)],
                  uc.max.variance.bias= -min(uc.variance.bias),
                  uc.max.variance.bias.delta = delta[which.min(uc.variance.bias)],
                  uc.max.variance.bias.sigma = sigma[which.min(uc.variance.bias)]
                  )


df <- melt(max.varbias,id='n1')
df <- within(df,scale <- c("absolute","relative")[grepl("rel",variable)+1])
df <- within(df,method <- factor((2:1)[grepl("uc",variable)+1],labels=c("unadjusted","adjusted")))
df <- within(df,variable <- sub("rel\\.","",variable))
df <- within(df,variable <- sub("uc\\.","",variable))
df <- within(df,variable <- factor(variable,labels=c('maximum variance bias',expression(delta),expression(sigma))))
dfa <- df[df$scale=="absolute",]
scalehelper <- data.frame(n1=rep(-10,3),variable=factor(1:3,label=c("maximum variance bias",expression(delta),expression(sigma))),value=rep(0,3),scale=rep("absolute",3),method=rep("adjusted",3))
dfa <- rbind(dfa,scalehelper)
vplot <- ggplot(dfa,aes(2*n1,value))+
    geom_line(subset=.(variable=="maximum variance bias")) +
    geom_smooth(subset=.(variable==levels(variable)[3])) + geom_point(subset=.(variable!="maximum variance bias"),size=1) +
    facet_grid(variable~method,scale='free_y',labeller=lverbose) +xlab(expression(paste("Total first stage sample size ",2*n[1])))+ylab('Value')+theme_bw()+xlim(c(2,150))
print(vplot)



@
\end{document}


<<eval=F>>=
cairo_ps('maxbias.eps',height=7,width=7)
print(mplot)
dev.off()

cairo_ps('maxvbias.eps',height=7,width=7)
print(mplot)
dev.off()

@

